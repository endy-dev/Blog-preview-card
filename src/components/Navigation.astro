---
import { Icon } from "astro-icon/components";
import navData from "../data/navData";

interface Props {
  slide?: "left" | "right" | "top";
  grow?: "left" | "right" | "top";
  stickyNav?: boolean;
  logosize: number;
  classes?: string;
}

const { slide, grow, stickyNav, logosize, classes, ...rest } = Astro.props;

function watchSlideOrGrow(): void {
  if (!slide && !grow) {
    throw new Error("Please choose either slide or grow.");
  } else if (slide && grow) {
    throw new Error("Please choose either slide or grow, but not both.");
  }
}

watchSlideOrGrow();
---

<header
  class:list={["site-header", classes, { sticking: stickyNav }]}
  {...rest}
>
  <div class="container">
    <div class="site-header__inner">
      <a href="/" class="nav-logo">
        <Icon name="fireLogo" size={logosize} />
      </a>
      <nav>
        <input type="checkbox" id="toggle" />
        <label class="hamburger flex-group" for="toggle">
          <div></div>
          <div></div>
          <div></div>
        </label>
        <ul
          class="nav | flex-group"
          data-animation-grow={grow}
          data-animation-slide={slide}
        >
          {
            navData.map((items) => (
              <li>
                <a href={items.path}>{items.name}</a>
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
  </div>
  <label class="menu-close-overlay" for="toggle"></label>
</header>

<script>
  /* 
---------------------------------------------------------------------------------------  
     Create a scroll watcher element and insert it before the primaryHeader element
---------------------------------------------------------------------------------------
 */
  const primaryHeader = document.querySelector(".site-header") as HTMLElement;
  const navElement = document.querySelector(".nav") as HTMLOListElement;
  const scrollWatcher = document.createElement("div");

  scrollWatcher.setAttribute("data-scroll-watcher", "");
  primaryHeader.before(scrollWatcher);
  /* 
-------------------------------------------------------------------------------------------
     Create an IntersectionObserver to toggle the "stickynav" class on the primaryHeader
     element based on its intersection with the viewport
-------------------------------------------------------------------------------------------
 */
  const navObserver = new IntersectionObserver(
    (entries) => {
      primaryHeader.classList.toggle("stickynav", !entries[0].isIntersecting);

      /* 
      -------------------------------------------------------------------------
            use this only if the stichy nav is active
            the nav items gets the background color from the parent(header)
            the parent in this case changes colors in sticky mode
      --------------------------------------------------------------------------      
      */
      if (window.matchMedia("(max-width: 30rem)").matches) {
        navElement.style.backgroundColor = getComputedStyle(
          primaryHeader
        ).getPropertyValue("--site-header-background-color");
      } else {
        navElement.style.backgroundColor = "transparent";
      }
      /* 
      ----------------------------------------------------------------
         here ends the code where it should be used for sticky nav
      ----------------------------------------------------------------   
      */
    },
    { rootMargin: "150px 0px 0px 0px" }
  );

  navObserver.observe(scrollWatcher);

  const checkbox = document.querySelector("#toggle") as HTMLInputElement;
  /* 
  ---------------------------------------
     Uncheck the checkbox on page load
  ---------------------------------------
 */
  window.addEventListener("DOMContentLoaded", function () {
    checkbox.checked = false;
  });
</script>

<style lang="scss">
  @use "../styles/abstracts/" as *;

  @include mq(small, max-width) {
    /* 
    --------------------------------
       nav items animation start
    --------------------------------
    */
    .nav {
      --flex-direction: column;
      --align-items: center;
      font-size: 0;
      position: absolute;
      top: 0;
      z-index: -100;
      transition: all $animation-transation-duration linear;
    }

    /* 
    ---------------------------
       slide animation start
    ---------------------------   
    */
    [data-animation-slide="left"] {
      left: 0;
    }

    [data-animation-slide="right"] {
      right: 0;
    }

    [data-animation-slide="left"],
    [data-animation-slide="right"] {
      height: $navigation-height;
      width: 0;
    }

    [data-animation-slide="top"] {
      left: 0;
      right: 0;
      width: 100%;
      height: 0;
    }

    /* 
    ---------------------------
       grow animation start
    ---------------------------   
    */
    [data-animation-grow="top"],
    [data-animation-grow="right"],
    [data-animation-grow="left"] {
      width: 0;
      height: 0;
    }

    [data-animation-grow="right"] {
      right: 0;
    }

    [data-animation-grow="left"] {
      left: 0;
    }

    [data-animation-grow="top"] {
      left: 50%;
    }

    /* 
    ------------------------------
       nav items animation end
    ------------------------------   
    */
    nav:has(#toggle:checked) .nav {
      font-size: $navigation-mobile-font-size;
      color: $navigation-color;
      padding-top: $navigation-padding-top;

      /* 
      ---------------------------
        slide animation end
      ---------------------------   
      */
      &[data-animation-slide="left"],
      &[data-animation-slide="right"] {
        width: $navigation-width;
      }

      &[data-animation-slide="top"] {
        height: $navigation-height;
      }

      /* 
      ---------------------------
        grow animation end
      ---------------------------   
      */
      &[data-animation-grow="right"],
      &[data-animation-grow="left"] {
        width: $navigation-width;
        height: $navigation-height;
      }

      &[data-animation-grow="top"] {
        left: 0;
        right: 0;
        width: 100%;
        height: $navigation-height;
      }
    }
  }
</style>

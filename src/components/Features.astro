---
import features from "../data/features.js";
import Heading from "../components/Heading.astro";
import { Icon } from "astro-icon/components";

interface Props {
  classes?: string;
}

const { classes, ...rest } = Astro.props;
---

<div class="container | features" data-type="wide">
  <Heading classes="heading margin-block-end-10" tagName="h2" size="h2"
    >Feature benefits</Heading
  >
  <div class="even-columns">
    <fieldset class:list={[classes]} {...rest}>
      {
        features.map((feature) => (
          <div class="label-container">
            <input type="radio" name="feature" id={feature.id} />
            <label for={feature.id} class="label | flex-group">
              {feature.label}
              <Icon
                name="circle-right-arrow-full"
                class:list={["full-icon", "display-none"]}
              />
              <Icon
                name="circle-right-arrow-stroke"
                class:list={["outline-icon"]}
              />
            </label>
          </div>
        ))
      }
    </fieldset>
    <div class="flex-group my-auto">
      {
        features.map((feature) => (
          <p data-input={feature.id}>{feature.description}</p>
        ))
      }
    </div>
  </div>
</div>

<script>
  //on page refresh it activates only the first one
  document.addEventListener("DOMContentLoaded", function () {
    const contentInput = document.getElementById("content") as HTMLInputElement;
    const contentLabel = document.querySelector(
      "#content + .label"
    ) as HTMLElement;
    const contentFullIcon = document.querySelector(
      "#content + .label .full-icon"
    ) as HTMLElement;
    const contentOutlineIcon = document.querySelector(
      "#content + .label .outline-icon"
    ) as HTMLElement;

    contentLabel.classList.add("highlighted");

    // Check the input with the ID 'content' by default
    if (contentInput && contentFullIcon && contentOutlineIcon) {
      contentInput.checked = true;

      // Show the full icon and hide the outline icon for the 'content' input
      contentFullIcon.style.display = "block";
      contentOutlineIcon.style.display = "none";
    }

    // Add event listeners for the other inputs (if needed)
    const inputs = document.querySelectorAll('input[name="feature"]');
    const labels = document.querySelectorAll(".label");
    const fullIcons = document.querySelectorAll(".full-icon");
    const outlineIcons = document.querySelectorAll(".outline-icon");
    const descriptions = document.querySelectorAll("[data-input]");

    //function that shows only the respective description
    function toggleDescriptions(inputId: string) {
      descriptions.forEach((description) => {
        if (description.getAttribute("data-input") === inputId) {
          (description as HTMLElement).style.display = "block";
        } else {
          (description as HTMLElement).style.display = "none";
        }
      });
    }

    function toggleFontStyle(checkInput: boolean) {
      labels.forEach((label) => {
        const inputId = label.getAttribute("for");

        if (inputId) {
          const correspondingInput = document.getElementById(
            inputId
          ) as HTMLInputElement;

          if (correspondingInput.checked) {
            label.classList.add("highlighted");
          } else {
            label.classList.remove("highlighted");
          }
        }
      });
    }

    inputs.forEach((input) => {
      if ((input as HTMLInputElement).checked) {
        toggleDescriptions(input.id);
      }
    });

    inputs.forEach((input, index) => {
      input.addEventListener("change", () => {
        fullIcons.forEach(
          (icon) => ((icon as HTMLElement).style.display = "none")
        );
        outlineIcons.forEach(
          (icon) => ((icon as HTMLElement).style.display = "block")
        );

        const checkedInput = input as HTMLInputElement;
        toggleFontStyle(checkedInput.checked);

        if (checkedInput.checked) {
          (fullIcons[index] as HTMLElement).style.display = "block";
          (outlineIcons[index] as HTMLElement).style.display = "none";
          toggleDescriptions(checkedInput.id);
        }
      });
    });
  });
</script>
